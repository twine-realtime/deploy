AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Elastic Beanstalk Docker Environment with VPC, Dynamo, and Elasticache

Parameters:
  ACMCertificateARN:
    Type: String
    Description: The ARN of the ACM SSL Certificate for HTTPS
  GeneratedApiKey:
    Type: String
    Description: The API key generated in the application code
    NoEcho: true
  SolutionStackName:
    Type: String
    Description: The name of an Elastic Beanstalk supported platform version
    # Default: '64bit Amazon Linux 2023 v4.1.0 running Docker'
    Default: '64bit Amazon Linux 2023 v4.2.1 running Docker'
  EnvironmentRegion:
    Type: String
    Description: The AWS Region where the application will be deployed
  InstanceType:
    Type: String
    Description: The EC2 instance type for the Beanstalk environment
  CacheType:
    Type: String
    Description: The ElastiCache type
  S3BucketParam:
    Type: String
    Description: The name of the S3 bucket where the source bundle is located

Resources:
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true

  MyInternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  GatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyPublicSubnetOne:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']

  MyPublicSubnetTwo:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']

  MyRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC

  MyRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref MyInternetGateway

  SubnetRouteTableAssociationOne:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MyPublicSubnetOne
      RouteTableId: !Ref MyRouteTable

  ApiKeySecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: 'TwineAPI'
      Description: 'This secret stores the API key'
      SecretString: !Ref GeneratedApiKey

  MyDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: rooms
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: time_created
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: time_created
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  SubnetRouteTableAssociationTwo:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MyPublicSubnetTwo
      RouteTableId: !Ref MyRouteTable

  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for the load balancer'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0

  SampleEnvironmentSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for Elastic Beanstalk environment with load balancer'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3005'
          ToPort: '3005'
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  SampleRedisSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for ElastiCache Redis'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          SourceSecurityGroupId: !Ref SampleEnvironmentSecurityGroup
        - IpProtocol: tcp
          FromPort: '16379'
          ToPort: '16379'
          SourceSecurityGroupId: !Ref SampleEnvironmentSecurityGroup

  SampleInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: "/"
      Roles:
        - !Ref SampleRole

  SampleRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: "/"
      Policies:
        - PolicyName: MySamplePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - 'elasticbeanstalk:*'
                  - 'ec2:*'
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                  - 'cloudwatch:*'
                  - 'logs:*'
                  - 'elasticache:*'
                  - 'dynamodb:*'
                  - 'secretsmanager:GetSecretValue'
                Resource: '*'
        - PolicyName: CertificateManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'acm:ListCertificates'
                  - 'acm:DescribeCertificate'
                  - 'acm:GetCertificate'
                  - 'acm:ImportCertificate'  # Added to allow importing of certificates
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'  # Added to allow passing of roles
                Resource: '*'  # This should be restricted to the specific roles that need to be passed

  SampleApplication:
    Type: 'AWS::ElasticBeanstalk::Application'
    Properties:
      ApplicationName: 'Twine'
      Description: 'Elastic Beanstalk Application running on Docker'

  MyAppVersion:
    Type: 'AWS::ElasticBeanstalk::ApplicationVersion'
    Properties:
      ApplicationName: !Ref SampleApplication
      Description: 'Initial version'
      SourceBundle:
        S3Bucket: !Ref S3BucketParam
        S3Key: "Dockerrun.aws.json"

  SampleEnvironment:
    Type: 'AWS::ElasticBeanstalk::Environment'
    DependsOn: MyRedisCluster
    Properties:
      ApplicationName: !Ref SampleApplication
      EnvironmentName: 'Twine'
      SolutionStackName: !Ref SolutionStackName
      VersionLabel: !Ref MyAppVersion
      OptionSettings:
        - Namespace: 'aws:elasticbeanstalk:environment:proxy'
          OptionName: ProxyServer
          Value: 'none'
        - Namespace: 'aws:elasticbeanstalk:environment'
          OptionName: EnvironmentType
          Value: LoadBalanced
        - Namespace: 'aws:elasticbeanstalk:environment'
          OptionName: LoadBalancerType
          Value: 'application'
        - Namespace: 'aws:elasticbeanstalk:application'
          OptionName: Application Healthcheck URL
          Value: '/'
        - Namespace: 'aws:elasticbeanstalk:environment:process:default'
          OptionName: HealthCheckPath
          Value: '/'
        - Namespace: 'aws:elasticbeanstalk:environment:process:default'
          OptionName: MatcherHTTPCode
          Value: '201'
        - Namespace: 'aws:ec2:vpc'
          OptionName: VPCId
          Value: !Ref MyVPC
        - Namespace: 'aws:autoscaling:trigger'
          OptionName: MeasureName
          Value: CPUUtilization
        - Namespace: 'aws:autoscaling:trigger'
          OptionName: Statistic
          Value: Maximum
        - Namespace: 'aws:autoscaling:trigger'
          OptionName: Unit
          Value: Percent
        - Namespace: 'aws:autoscaling:trigger'
          OptionName: UpperThreshold
          Value: 40
        - Namespace: 'aws:autoscaling:trigger'
          OptionName: LowerThreshold
          Value: 10
        - Namespace: 'aws:autoscaling:trigger'
          OptionName: Period
          Value: 1
        - Namespace: 'aws:autoscaling:trigger'
          OptionName: BreachDuration
          Value: 1
        - Namespace: 'aws:ec2:vpc'
          OptionName: Subnets
          Value: !Join [',', [!Ref MyPublicSubnetOne, !Ref MyPublicSubnetTwo]]
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: SecurityGroups
          Value: !Ref SampleEnvironmentSecurityGroup
        - Namespace: 'aws:elb:loadbalancer'
          OptionName: 'SecurityGroups'
          Value: !Ref LoadBalancerSecurityGroup
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: IamInstanceProfile
          Value: !Ref SampleInstanceProfile
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: InstanceType
          Value: !Ref InstanceType
        - Namespace: 'aws:autoscaling:asg'
          OptionName: MinSize
          Value: 2
        - Namespace: 'aws:autoscaling:asg'
          OptionName: MaxSize
          Value: 4
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: CACHE_ENDPOINT
          Value: !Join 
            - ''
            - - 'redis://'
              - !GetAtt MyRedisCluster.RedisEndpoint.Address
              - ':6379'
        - Namespace: 'aws:elbv2:listener:443'
          OptionName: 'ListenerEnabled'
          Value: 'true'
        - Namespace: 'aws:elbv2:listener:443'
          OptionName: 'Protocol'
          Value: 'HTTPS'
        - Namespace: 'aws:elbv2:listener:443'
          OptionName: 'SSLCertificateArns'
          Value: !Ref ACMCertificateARN
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: 'REGION'
          Value: !Ref EnvironmentRegion
        - Namespace: 'aws:elasticbeanstalk:environment:process:default'
          OptionName: StickinessEnabled
          Value: 'true'
        - Namespace: 'aws:elasticbeanstalk:environment:process:default'
          OptionName: StickinessType
          Value: 'lb_cookie'
        - Namespace: 'aws:elasticbeanstalk:environment:process:default'
          OptionName: StickinessLBCookieDuration
          Value: '86400'
      Tier:
        Name: WebServer
        Type: Standard

  MyElastiCacheSubnetGroup:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: 'Subnet Group for ElastiCache Redis Cluster'
      SubnetIds:
        - !Ref MyPublicSubnetOne
        - !Ref MyPublicSubnetTwo

  MyRedisCluster:
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      Engine: 'redis'
      CacheNodeType: !Ref CacheType
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref MyElastiCacheSubnetGroup
      VpcSecurityGroupIds:
        - !GetAtt SampleRedisSecurityGroup.GroupId

Outputs:
  EnvironmentURL:
    Description: 'URL of the AWS Elastic Beanstalk Environment'
    Value: !GetAtt SampleEnvironment.EndpointURL

  RedisEndPoint:
    Description: 'Endpoint of the ElastiCache Redis cluster'
    Value: !GetAtt MyRedisCluster.RedisEndpoint.Address
